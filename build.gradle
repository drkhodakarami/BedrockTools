plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }

    maven { url = "https://api.modrinth.com/maven" }

	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}

	maven { url "https://maven.shedaniel.me" }

	maven {
		url = "https://maven.pitan76.net/"
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Mod Menu Dependency
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
	
    // Mod Menu Badges Lib
    include(modImplementation("maven.modrinth:modmenu-badges-lib:${badges_lib_version}"))

	// Needed for Custom Player Effects
	modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
	include "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {
	}
}

tasks.create("checkVersionFileValidation") {
	doFirst {
		File testFile = new File("${remapJar.archiveFile.get()}");
		if ( testFile.isFile() ) {
			throw new GradleException("project version is built before, change the project version >>> ${project.mod_version}")
		} else {
			println "Project version needs building >>> ${project.archives_base_name}-${project.mod_version}"
		}
	}
}

compileJava.dependsOn checkVersionFileValidation